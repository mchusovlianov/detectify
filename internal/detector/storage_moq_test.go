// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package detector

import (
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//     func TestSomethingThatUsesStorage(t *testing.T) {
//
//         // make and configure a mocked Storage
//         mockedStorage := &StorageMock{
//             GetFunc: func(uuid string) (interface{}, error) {
// 	               panic("mock out the Get method")
//             },
//             SetFunc: func(uuid string, result interface{}) error {
// 	               panic("mock out the Set method")
//             },
//         }
//
//         // use mockedStorage in code that requires Storage
//         // and then make assertions.
//
//     }
type StorageMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(uuid string) (interface{}, error)

	// SetFunc mocks the Set method.
	SetFunc func(uuid string, result interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// UUID is the uuid argument value.
			UUID string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// UUID is the uuid argument value.
			UUID string
			// Result is the result argument value.
			Result interface{}
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *StorageMock) Get(uuid string) (interface{}, error) {
	if mock.GetFunc == nil {
		panic("StorageMock.GetFunc: method is nil but Storage.Get was just called")
	}
	callInfo := struct {
		UUID string
	}{
		UUID: uuid,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(uuid)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorage.GetCalls())
func (mock *StorageMock) GetCalls() []struct {
	UUID string
} {
	var calls []struct {
		UUID string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *StorageMock) Set(uuid string, result interface{}) error {
	if mock.SetFunc == nil {
		panic("StorageMock.SetFunc: method is nil but Storage.Set was just called")
	}
	callInfo := struct {
		UUID   string
		Result interface{}
	}{
		UUID:   uuid,
		Result: result,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(uuid, result)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedStorage.SetCalls())
func (mock *StorageMock) SetCalls() []struct {
	UUID   string
	Result interface{}
} {
	var calls []struct {
		UUID   string
		Result interface{}
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
